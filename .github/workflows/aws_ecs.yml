name: "Terraform AWS ECS"

on:
  workflow_call:
    inputs:
      newrelic_account_id:
        required: true
        type: string
      newrelic_api_key:
        required: true
        type: string
      newrelic_region:
        required: true
        type: string
      terraform_destroy:
        required: false
        default: false
        type: boolean
    secrets:
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_RESOURCE_GROUP_NAME:
        required: true
      AZURE_STORAGE_ACCOUNT_NAME:
        required: true
      AZURE_BLOB_CONTAINER_NAME:
        required: true

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    env:
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Initialize Terraform
        run: |
          terraform -chdir=./terraform/aws/ecs init \
          -upgrade \
          -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.AZURE_BLOB_CONTAINER_NAME }}" \
          -backend-config="key=${{ inputs.newrelic_account_id }}-aws-ecs"

      # Check that all Terraform configuration files adhere to a canonical format
      - name: Format Terraform
        run: terraform -chdir=./terraform/aws/ecs fmt -check

      # Generate an execution plan for Terraform
      - name: Plan Terraform
        run: |
          terraform -chdir=./terraform/aws/ecs plan \
            -var NEW_RELIC_ACCOUNT_ID=${{ inputs.newrelic_account_id }} \
            -var NEW_RELIC_API_KEY=${{ inputs.newrelic_api_key }} \
            -var NEW_RELIC_REGION=${{ inputs.newrelic_region }} \
            -out "./tfplan"

      # Apply the configured Terraform plan
      - name: Apply Terraform
        if: inputs.terraform_destroy == false
        run: |
          terraform -chdir=./terraform/aws/ecs apply \
            -auto-approve \
            -var NEW_RELIC_ACCOUNT_ID=${{ inputs.newrelic_account_id }} \
            -var NEW_RELIC_API_KEY=${{ inputs.newrelic_api_key }} \
            -var NEW_RELIC_REGION=${{ inputs.newrelic_region }}

      # Destroy the existing Terraform deployment
      - name: Destroy Terraform
        if: inputs.terraform_destroy == true
        run: |
          terraform -chdir=./terraform/aws/ecs destroy \
            -auto-approve \
            -var NEW_RELIC_ACCOUNT_ID=${{ inputs.newrelic_account_id }} \
            -var NEW_RELIC_API_KEY=${{ inputs.newrelic_api_key }} \
            -var NEW_RELIC_REGION=${{ inputs.newrelic_region }}
